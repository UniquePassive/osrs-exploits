package com.uniquepassive.osrsexploits;

import com.uniquepassive.osrsexploits.util.JarUtil;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.FieldInsnNode;

import java.io.IOException;
import java.util.*;
import java.util.jar.JarFile;

/**
 * The initialization order of static fields (their first time being set in <clinit>) appears
 * to not be changed by the obfuscator, and is thus the same as the original field order.
 *
 * This means that we can reorder static fields in such a way
 * that the order will for example be the same between revisions,
 * while at the same time "undoing" the obfuscator's weak attempt
 * at shuffling field order.
 */
public class GamepackFieldReorderer {

    public static void main(String[] args) throws IOException {
        if (args.length >= 1) {
            JarFile file = new JarFile(args[0]);

            Map<String, ClassNode> classes = JarUtil.readJar(file);

            classes.values().forEach(c -> {
                c.methods.stream()
                        .filter(m -> m.name.equals("<clinit>"))
                        .findAny()
                        .ifPresent(m -> {
                            Map<String, Integer> foundFieldsIndices = new HashMap<>();

                            ListIterator<AbstractInsnNode> iterator = m.instructions.iterator();

                            while (iterator.hasNext()) {
                                AbstractInsnNode i = iterator.next();

                                if (i.getOpcode() == Opcodes.PUTSTATIC) {
                                    FieldInsnNode i2 = (FieldInsnNode) i;

                                    if (i2.owner.equals(c.name)) {
                                        if (!foundFieldsIndices.containsKey(i2.name)) {
                                            foundFieldsIndices.put(i2.name, foundFieldsIndices.size());
                                        }
                                    }
                                }
                            }

                            System.out.println("Class " + c.name + ":");

                            c.fields.stream()
                                    .filter(f -> (f.access & Opcodes.ACC_STATIC) != 0)
                                    .sorted((f, f2) -> {
                                        Integer idx = foundFieldsIndices.get(f.name);
                                        Integer idx2 = foundFieldsIndices.get(f2.name);

                                        if (idx == null && idx2 == null) {
                                            return 0;
                                        }

                                        if (idx == null) {
                                            return 1;
                                        }

                                        if (idx2 == null) {
                                            return -1;
                                        }

                                        return Integer.compare(idx, idx2);
                                    })
                                    .forEach(f -> {
                                        Integer idx = foundFieldsIndices.get(f.name);

                                        if (idx != null) {
                                            System.out.println(idx + " - " + c.name + "." + f.name);
                                        } else {
                                            System.out.println("? - " + c.name + "." + f.name + " (field was probably moved to this class)");
                                        }
                                    });

                            System.out.println();
                        });
            });
        } else {
            System.out.println("Example arguments: \"deobfed_gamepack_127.jar\"");
        }
    }
}
