package com.uniquepassive.osrsexploits;

import com.uniquepassive.osrsexploits.util.JarUtil;
import jdk.internal.org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.*;
import java.util.jar.JarFile;
import java.util.stream.Collectors;

/**
 * Reorders methods in classes, based on the knowledge of code/method line numbers.
 *
 * They aren't obfuscated, so obviously you can use them to map methods between revisions,
 * or just know about the structure of classes (eg. the order of methods, demonstrated here).
 */
public class GamepackMethodReorderer {

    public static void main(String[] args) throws IOException {
        if (args.length >= 1) {
            JarFile file = new JarFile(args[0]);

            Map<String, ClassNode> classes = JarUtil.readJar(file, false);

            classes.values().forEach(c -> {
                Map<MethodNode, Integer> methodStartLines = new HashMap<>();

                List<MethodNode> instanceMethods = c.methods
                        .stream()
                        .filter(m -> (m.access & Opcodes.ACC_STATIC) == 0 || m.name.equals("<clinit>"))
                        .collect(Collectors.toList());

                instanceMethods.forEach(m -> {
                    List<Integer> lineNumbers = new ArrayList<>();

                    m.instructions.iterator().forEachRemaining(i -> {
                        if (i instanceof LineNumberNode) {
                            lineNumbers.add(((LineNumberNode) i).line);
                        }
                    });

                    if (!lineNumbers.isEmpty()) {
                        // Get the lowest recorded line number for the method
                        int lineNumber = Integer.MAX_VALUE;

                        for (Integer number : lineNumbers) {
                            if (lineNumber > number) {
                                lineNumber = number;
                            }
                        }

                        methodStartLines.put(m, lineNumber);
                    } else {
                        // Place methods without any lines at the bottom
                        methodStartLines.put(m, Integer.MAX_VALUE);
                    }
                });

                if (!methodStartLines.isEmpty()) {
                    System.out.println();
                    System.out.println("Reordered instance methods for " + c.name + ":");
                    System.out.println();

                    // Sort methods by lowest line number first
                    List<Map.Entry<MethodNode, Integer>> entryList = new ArrayList<>(methodStartLines.entrySet());
                    entryList.sort(Comparator.comparingInt(Map.Entry::getValue));

                    for (int i = 0; i < instanceMethods.size(); i++) {
                        MethodNode m = instanceMethods.get(i);

                        Map.Entry<MethodNode, Integer> entry = entryList.get(i);

                        MethodNode m2 = entry.getKey();
                        Integer lineNumber = entry.getValue();

                        System.out.println(MessageFormat.format("{0}.{1}{2} -> {3}.{4}{5} at line number {6}",
                                c.name, m.name, m.desc, c.name, m2.name, m2.desc,
                                lineNumber == Integer.MAX_VALUE ? "N/A" : lineNumber));
                    }
                }
            });
        } else {
            System.out.println("Example arguments: \"gamepack_127.jar\"");
        }
    }
}
